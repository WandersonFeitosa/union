// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type             String
  provider         String
  providerAccountId String
  refresh_token    String? @db.Text
  access_token     String? @db.Text
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String? @db.Text
  session_state    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum WowClass {
  WARLOCK
  WARRIOR
  DRUID
  HUNTER
  MAGE
  PALADIN
  ROGUE
  SHAMAN
  PRIEST
}

model Character {
  id        String   @id @default(cuid())
  name      String
  class     WowClass
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  runPlayer RunPlayer[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isCarrier     Boolean   @default(false)
  characters    Character[]
  accounts      Account[]
  sessions      Session[]
  runPlayers    RunPlayer[]
  runsCreated   Run[]     @relation("CreatedRuns")
}

model Item {
  id          String   @id @default(cuid())
  name        String
  price       Int      // Price in gold
  imageUrl    String?
  reservations Reservation[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Run {
  id          String   @id @default(cuid())
  datetime    DateTime
  dungeon     String
  status      RunStatus @default(SCHEDULED)
  createdById String
  createdBy   User     @relation("CreatedRuns", fields: [createdById], references: [id])
  leaderId    String?
  players     RunPlayer[]
  reservations Reservation[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum RunStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model RunPlayer {
  id          String   @id @default(cuid())
  runId       String
  userId      String
  characterId String
  isLeader    Boolean  @default(false)
  isCarrier   Boolean
  run         Run      @relation(fields: [runId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  character   Character @relation(fields: [characterId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([runId, userId])
}

model Reservation {
  id          String   @id @default(cuid())
  runId       String
  itemId      String
  userId      String
  run         Run      @relation(fields: [runId], references: [id])
  item        Item     @relation(fields: [itemId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([runId, itemId, userId])
}
